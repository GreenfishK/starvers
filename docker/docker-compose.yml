services:
  starversserver:
    image: starversserver # should be changed to ghcr.io/martinmitteregger/starversserver:main
    container_name: starvers-server
    restart: always
    ports:
      - 80:80
    env_file: "../prod.env"
    volumes:
      - ${data_storage}/evaluation:/code/evaluation
      - ${data_storage}/logs:/code/logs
      - ${data_storage}/graphdb-data/graphdb-import:/graphdb-import
    depends_on:
      db:
        condition: service_started
      rdfstore:
        condition: service_started
    entrypoint: ["uvicorn", "app.main:app", "--reload"]
  
  gui:
    image: starversserver_gui # should be changed to ghcr.io/martinmitteregger/starversserver:main
    container_name: starvers-gui
    ports:
      - 5000:5000
    volumes:
      - ../app/gui:/code/app/gui
      - ${data_storage}/evaluation:/code/evaluation
      - ${data_storage}/logs:/code/logs
    depends_on:
      db:
        condition: service_started
      rdfstore:
        condition: service_started
    env_file: "../prod.env"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    entrypoint: ["python", "app/run_gui.py"]

  # Creates a timestamped RDF-star dataset from individual snapshots
  retroVersioning:
    image: starversserver
    env_file: "../prod.env"
    depends_on:
      db:
        condition: service_started
      rdfstore:
        condition: service_started
    ports: 
      - 80:80
    volumes:
      - ${data_storage}/evaluation:/code/evaluation
      - ${data_storage}/logs:/code/logs
      - ${data_storage}/graphdb-data/graphdb-import:/graphdb-import
    entrypoint: ["python", "app/utils/RetroVersioning.py", "orkg_iterative", "ITERATIVE"]

  evaluate:
    image: starversserver
    env_file: "../prod.env"
    volumes:
      - ../evaluation:/code/evaluation
      - ${data_storage}/evaluation:/data/evaluation
      - ${data_storage}/logs:/data/logs
    entrypoint: ["python", "/code/evaluation/evaluation.py"]


  db:
    image: postgres
    container_name: starvers-db
    restart: always
    env_file: "../prod.env"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: starvers_db
    ports:
      - 5432:5432
    volumes:
      - ${data_storage}/postgresql/data:/var/lib/postgresql/data


  rdfstore:
    image: ontotext/graphdb:10.5.0
    container_name: starvers-rdfstore
    restart: always
    env_file: "../prod.env"
    environment: 
      GDB_JAVA_OPTS: >-
        -Xmx32g -Xms32g
        -Dgraphdb.home=/opt/graphdb/home
        -Dgraphdb.workbench.importDirectory=/opt/graphdb/home/graphdb-import
        -Dgraphdb.workbench.cors.enable=true
        -Denable-context-index=true
        -Dentity-pool-implementation=transactional
        -Dhealth.max.query.time.seconds=60
        -Dgraphdb.append.request.id.headers=true
        -Dreuse.vars.in.subselects=true
        -Dgraphdb.health.minimal.free.storage.enabled=false
        -Dgraphdb.health.minimal.free.storage.asyncCheck=false
    ports: 
      - 7200:7200
      - 7300:7300
    volumes:
      - ${data_storage}/graphdb-data:/opt/graphdb/home
    extra_hosts:
      - "host.docker.internal:host-gateway"
  

