services:
  gui:
    image: starversserver
    container_name: starvers-gui_prod
    ports:
      - 5001:5000
    volumes:
      - ../app/gui:/code/app/gui
      - ../app/AppConfig.py:/code/app/AppConfig.py
      - ../app/LoggingConfig.py:/code/app/LoggingConfig.py
      - ${data_storage}/evaluation:/data/evaluation
      - ${data_storage}/logs:/data/logs
    depends_on:
      db:
        condition: service_started
      rdfstore:
        condition: service_started
    env_file: "./prod.env"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - starvers_prod_net
    entrypoint: ["python", "app/run_gui.py"]

  starversserver:
    image: starversserver # should be changed to ghcr.io/martinmitteregger/starversserver:main
    container_name: starvers-server_prod
    restart: always
    ports:
      - 80:80
    env_file: "./prod.env"
    volumes:
      - ${data_storage}/evaluation:/data/evaluation
      - ${data_storage}/logs:/data/logs
      - ${data_storage}/graphdb-data/graphdb-import:/graphdb-import
    depends_on:
      db:
        condition: service_started
      rdfstore:
        condition: service_started
    networks:
      - starvers_prod_net
    entrypoint: ["uvicorn", "app.main:app", "--reload"]

  db:
    image: postgres
    container_name: starvers-db_prod
    restart: always
    env_file: "./prod.env"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: starvers_db
    ports:
      - 5433:5432
    volumes:
      - ${data_storage}/postgresql/data:/var/lib/postgresql/data
    networks:
      - starvers_prod_net

  rdfstore:
    image: ontotext/graphdb:10.5.0
    container_name: starvers-rdfstore_prod
    restart: always
    env_file: "./prod.env"
    environment: 
      GDB_JAVA_OPTS: >-
        -Xmx32g -Xms32g
        -Dgraphdb.home=/opt/graphdb/home
        -Dgraphdb.workbench.importDirectory=/opt/graphdb/home/graphdb-import
        -Dgraphdb.workbench.cors.enable=true
        -Denable-context-index=true
        -Dentity-pool-implementation=transactional
        -Dhealth.max.query.time.seconds=60
        -Dgraphdb.append.request.id.headers=true
        -Dreuse.vars.in.subselects=true
        -Dgraphdb.health.minimal.free.storage.enabled=false
        -Dgraphdb.health.minimal.free.storage.asyncCheck=false
        -Dgraphdb.connector.port=7200
    ports: 
      - 7400:7200
    volumes:
      - ${data_storage}/graphdb-data:/opt/graphdb/home
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - starvers_prod_net

  # Runs versioning and metrics computation tasks for data in ${data_storage}/evaluation. Possible executions are
  # * entrypoint: ["python", "app/utils/Compute.py", "<repo_name>"]
  #   Runs versioning and metrics computation for the specified repository
  # * entrypoint: ["python", "app/utils/Compute.py", "<repo_name>", from_scratch, "yyyyMMdd-HHmmss_sss"]
  #   Runs versioning and metrics computation for the specified repository from a specific timestamp with initial versioning
  # * entrypoint: ["python", "app/utils/Compute.py", "<repo_name>", from_version, "yyyyMMdd-HHmmss_sss"]
  #   Continues versioning and metrics computation for the specified repository from a specific timestamp without initial versioning
  # * entrypoint: ["python", "app/utils/Compute.py", "<repo_name>",  (<from_version|from_scratch>), ("yyyyMMdd-HHmmss_sss"), "v"]
  #   Runs only versioning without metrics computation for the specified repository from a specific timestamp
  # * entrypoint: ["python", "app/utils/Compute.py", "<repo_name>", (<from_version|from_scratch>), ("yyyyMMdd-HHmmss_sss"), "dm, sm"]
  #   Runs only thout metrics computation without versioning for the specified repository, with the possibility of running from scratch or from a specific timestamp
  compute:
    image: starversserver
    container_name: starvers-compute_prod
    env_file: "./prod.env"
    depends_on:
      db:
        condition: service_started
      rdfstore:
        condition: service_started
    networks:
      - starvers_prod_net
    volumes:
      - ${data_storage}/evaluation:/data/evaluation
      - ${data_storage}/logs:/data/logs
      - ${data_storage}/graphdb-data/graphdb-import:/graphdb-import
    entrypoint: ["python", "evaluation/Compute.py", "orkg", "sm", "from_version", "20250718-175230_258"] 

    # Creates plots from the timing files
  create_plots:
    image: starversserver_dev
    container_name: starvers-create-plots_prod
    env_file: "./dev.env"
    volumes:
      - ../evaluation:/data/evaluation
      - ${data_storage}/evaluation:/data/evaluation
      - ${data_storage}/logs:/data/logs
    entrypoint: ["python", "/data/evaluation/evaluation.py"]

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./nginx/html:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    networks:
      - starvers_prod_net
    depends_on:
      - rdfstore
      - db
      - gui

  certbot:
    image: certbot/certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./nginx/html:/var/www/certbot
      - /${data_storage}/logs/letsencrypt:/var/log/letsencrypt
    networks:
      - starvers_prod_net
    entrypoint: >
      sh -c "certbot certonly --non-interactive --webroot
      --webroot-path=/var/www/certbot
      --email filip.kovacevic@tuwien.ac.at
      --agree-tos
      --no-eff-email
      -d starvers.ec.tuwien.ac.at"

  certbot-renew:
    image: certbot/certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./nginx/html:/var/www/certbot
    networks:
      - starvers_prod_net
    entrypoint: >
      sh -c "trap exit TERM; while :; do
      certbot renew --webroot --webroot-path=/var/www/certbot &&
      nginx -s reload;
      sleep 12h & wait $${!};
      done"


volumes:
  certbot-etc:
  certbot-var:

networks:
  starvers_prod_net:
    driver: bridge